/*
 * Loyalty Airport Experience API
 * The Loyalty Airport Lounge APIs offers cardholders, via their issuers, the ability to  access the Mastercard Airport Lounge service through this digital channel.  Cardholders can search for airport lounges, get airport lounge details,  access airport lounges via their personalized Digital Membership Card,  and access their lounge history. These APIs can be used to build a rich,  interactive airport experience within the issuer's existing mobile application.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: project-ole@mastercard.flowdock.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mastercard.developer.loyalty_airport_client.api;

import com.mastercard.developer.loyalty_airport_client.ApiException;
import com.mastercard.developer.loyalty_airport_client.model.ErrorItems;
import com.mastercard.developer.loyalty_airport_client.model.LoungeAirport;
import com.mastercard.developer.loyalty_airport_client.model.LoungeDMC;
import com.mastercard.developer.loyalty_airport_client.model.LoungeDetail;
import com.mastercard.developer.loyalty_airport_client.model.LoungeEntitlement;
import com.mastercard.developer.loyalty_airport_client.model.LoungeHistoryItem;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AirportApi
 */
@Ignore
public class AirportApiTest {

    private final AirportApi api = new AirportApi();

    
    /**
     * Get airport lounge digital membership card
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void loyaltyAirportDigitalMembershipCardsGetTest() throws ApiException {
        String userId = null;
        String panLastFourDigits = null;
        LoungeDMC response = api.loyaltyAirportDigitalMembershipCardsGet(userId, panLastFourDigits);

        // TODO: test validations
    }
    
    /**
     * Get information about future personal and guest entitlements
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void loyaltyAirportEntitlementsGetTest() throws ApiException {
        String userId = null;
        String panLastFourDigits = null;
        List<LoungeEntitlement> response = api.loyaltyAirportEntitlementsGet(userId, panLastFourDigits);

        // TODO: test validations
    }
    
    /**
     * Find airport lounges
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void loyaltyAirportLoungesGetTest() throws ApiException {
        String userId = null;
        String panLastFourDigits = null;
        String searchText = null;
        String preferredLanguage = null;
        List<LoungeAirport> response = api.loyaltyAirportLoungesGet(userId, panLastFourDigits, searchText, preferredLanguage);

        // TODO: test validations
    }
    
    /**
     * Get airport lounge details
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void loyaltyAirportLoungesLoungeCodeGetTest() throws ApiException {
        String loungeCode = null;
        String userId = null;
        String panLastFourDigits = null;
        String preferredLanguage = null;
        LoungeDetail response = api.loyaltyAirportLoungesLoungeCodeGet(loungeCode, userId, panLastFourDigits, preferredLanguage);

        // TODO: test validations
    }
    
    /**
     * Get airport lounge access history
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void loyaltyAirportVisitsGetTest() throws ApiException {
        String userId = null;
        String panLastFourDigits = null;
        String preferredLanguage = null;
        String transactionDateFrom = null;
        String transactionDateTo = null;
        List<LoungeHistoryItem> response = api.loyaltyAirportVisitsGet(userId, panLastFourDigits, preferredLanguage, transactionDateFrom, transactionDateTo);

        // TODO: test validations
    }
    
}
