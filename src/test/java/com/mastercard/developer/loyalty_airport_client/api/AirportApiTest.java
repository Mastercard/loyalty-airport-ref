/*
 *  Copyright (c) 2019 Mastercard
 
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
 
    http://www.apache.org/licenses/LICENSE-2.0
 
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

 * 
 * Loyalty Airport Experience API
 * The Loyalty Airport Lounge APIs offers cardholders, via their issuers, the ability to  access the Mastercard Airport Lounge service through this digital channel.  Cardholders can search for airport lounges, get airport lounge details,  access airport lounges via their personalized Digital Membership Card,  and access their lounge history. These APIs can be used to build a rich,  interactive airport experience within the issuer's existing mobile application.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: loyalty-benefits-support@mastercard.flowdock.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mastercard.developer.loyalty_airport_client.api;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.isNull;
import static org.mockito.Mockito.when;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import com.mastercard.developer.loyalty_airport_client.ApiClient;
import com.mastercard.developer.loyalty_airport_client.ApiException;
import com.mastercard.developer.loyalty_airport_client.ApiResponse;
import com.mastercard.developer.loyalty_airport_client.ProgressRequestBody;
import com.mastercard.developer.loyalty_airport_client.model.LoungeAirport;
import com.mastercard.developer.loyalty_airport_client.model.LoungeDMC;
import com.mastercard.developer.loyalty_airport_client.model.LoungeDetail;
import com.mastercard.developer.loyalty_airport_client.model.LoungeEntitlement;
import com.mastercard.developer.loyalty_airport_client.model.LoungeHistoryItem;
import com.squareup.okhttp.Call;

/**
 * API tests for AirportApi
 */
public class AirportApiTest {

    private AirportApi api;
    
    @Mock
    private ApiClient apiClientMock;
    
    @Mock
    private Call call;

    
    
    @Before
    public void setUp() throws ApiException {
    	MockitoAnnotations.initMocks(this);
    	api = new AirportApi(apiClientMock);
    	when(apiClientMock.buildCall(any(String.class), any(String.class), any(List.class), any(List.class), any(Object.class), any(Map.class), any(Map.class), any(String[].class), (ProgressRequestBody.ProgressRequestListener)isNull())).thenReturn(call);
    }
    /**
     * Get airport lounge digital membership card
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @SuppressWarnings("rawtypes")
    @Test
    public void loyaltyAirportDigitalMembershipCardsGetTest() throws ApiException {
        String userId = "userId";
        String panLastFourDigits = "1234";
        LoungeDMC dmc = new LoungeDMC();
        dmc.setIsDMCAvailable(true);
        ApiResponse resp = new ApiResponse(200, null, dmc);
        when(apiClientMock.execute(any(Call.class), any(Type.class))).thenReturn(resp);
        LoungeDMC response = api.loyaltyAirportDigitalMembershipCardsGet(userId, panLastFourDigits);
        assertTrue(response.getIsDMCAvailable());
    }
    
    @Test(expected = ApiException.class)
    public void loyaltyAirportDigitalMembershipCardsGetTest_Exception() throws ApiException {
        String userId = null;
        String panLastFourDigits = "1234";
        LoungeDMC dmc = new LoungeDMC();
        dmc.setIsDMCAvailable(true);
        ApiResponse resp = new ApiResponse(200, null, dmc);
        when(apiClientMock.execute(any(Call.class), any(Type.class))).thenReturn(resp);
        api.loyaltyAirportDigitalMembershipCardsGet(userId, panLastFourDigits);
    }
    
    /**
     * Get information about future personal and guest entitlements
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @SuppressWarnings("rawtypes")
    @Test
    public void loyaltyAirportEntitlementsGetTest() throws ApiException {
    	 String userId = "userId";
         String panLastFourDigits = "1234";
         LoungeEntitlement entitlement = new LoungeEntitlement();
         entitlement.setCategory("Cat123");
         List<LoungeEntitlement> list = new ArrayList<>();
         list.add(entitlement);
         ApiResponse resp = new ApiResponse(200, null, list);
         when(apiClientMock.execute(any(Call.class), any(Type.class))).thenReturn(resp);
        List<LoungeEntitlement> response = api.loyaltyAirportEntitlementsGet(userId, panLastFourDigits);
        assertEquals(response, list);
    }
    
    @SuppressWarnings("rawtypes")
    @Test(expected = ApiException.class)
    public void loyaltyAirportEntitlementsGetTest_Exception() throws ApiException {
    	 String userId = null;
         String panLastFourDigits = "1234";
         LoungeEntitlement entitlement = new LoungeEntitlement();
         entitlement.setCategory("Cat123");
         List<LoungeEntitlement> list = new ArrayList<>();
         list.add(entitlement);
         ApiResponse resp = new ApiResponse(200, null, list);
         when(apiClientMock.execute(any(Call.class), any(Type.class))).thenReturn(resp);
        api.loyaltyAirportEntitlementsGet(userId, panLastFourDigits);
    }
    
    /**
     * Find airport lounges
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @SuppressWarnings("rawtypes")
	@Test
    public void loyaltyAirportLoungesGetTest() throws ApiException {
        String userId = "userId";
        String panLastFourDigits = "1234";
        String searchText = "STL";
        String preferredLanguage = "en-US";
        LoungeAirport airport = new LoungeAirport();
        airport.setCity("St.Louis");
        List<LoungeAirport> list = new ArrayList<>();
        list.add(airport);
        ApiResponse resp = new ApiResponse(200, null, list);
        when(apiClientMock.execute(any(Call.class), any(Type.class))).thenReturn(resp);
        List<LoungeAirport> response = api.loyaltyAirportLoungesGet(userId, panLastFourDigits, searchText, preferredLanguage);
        assertEquals(response, list);
    }
    
    
    @SuppressWarnings("rawtypes")
    @Test(expected = ApiException.class)
    public void loyaltyAirportLoungesGetTest_Exception() throws ApiException {
        String userId = null;
        String panLastFourDigits = "1234";
        String searchText = "STL";
        String preferredLanguage = "en-US";
        LoungeAirport airport = new LoungeAirport();
        airport.setCity("St.Louis");
        List<LoungeAirport> list = new ArrayList<>();
        list.add(airport);
        ApiResponse resp = new ApiResponse(200, null, list);
        when(apiClientMock.execute(any(Call.class), any(Type.class))).thenReturn(resp);
        List<LoungeAirport> response = api.loyaltyAirportLoungesGet(userId, panLastFourDigits, searchText, preferredLanguage);
    }
    
    /**
     * Get airport lounge details
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @SuppressWarnings("rawtypes")
    @Test
    public void loyaltyAirportLoungesLoungeCodeGetTest() throws ApiException {
        String loungeCode = "lounge123";
        String userId = "userId";
        String panLastFourDigits = "1234";
        String preferredLanguage = "en-US";
        LoungeDetail loungeDetail = new LoungeDetail();
        loungeDetail.setAirportName("STL");
        ApiResponse resp = new ApiResponse(200, null, loungeDetail);
        when(apiClientMock.execute(any(Call.class), any(Type.class))).thenReturn(resp);
        when(apiClientMock.escapeString(loungeCode)).thenReturn(loungeCode);
        LoungeDetail response = api.loyaltyAirportLoungesLoungeCodeGet(loungeCode, userId, panLastFourDigits, preferredLanguage);
        assertEquals(response, loungeDetail);
    }
    
    @SuppressWarnings("rawtypes")
    @Test(expected = ApiException.class)
    public void loyaltyAirportLoungesLoungeCodeGetTest_Exception() throws ApiException {
        String loungeCode = "loungeCode";
        String userId = null;
        String panLastFourDigits = "1234";
        String preferredLanguage = "en-US";
        LoungeDetail loungeDetail = new LoungeDetail();
        loungeDetail.setAirportName("STL");
        ApiResponse resp = new ApiResponse(200, null, loungeDetail);
        when(apiClientMock.execute(any(Call.class), any(Type.class))).thenReturn(resp);
        api.loyaltyAirportLoungesLoungeCodeGet(loungeCode, userId, panLastFourDigits, preferredLanguage);
    }
    
    /**
     * Get airport lounge access history
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @SuppressWarnings("rawtypes")
    @Test
    public void loyaltyAirportVisitsGetTest() throws ApiException {
        String userId = "userId";
        String panLastFourDigits = "1234";
        String preferredLanguage = "en-US";
        String transactionDateFrom = null;
        String transactionDateTo = null;
        LoungeHistoryItem loungeHistory = new LoungeHistoryItem();
        loungeHistory.setCity("St.Louis");
        List<LoungeHistoryItem> list = new ArrayList<>();
        list.add(loungeHistory);
        ApiResponse resp = new ApiResponse(200, null, list);
        when(apiClientMock.execute(any(Call.class), any(Type.class))).thenReturn(resp);
        List<LoungeHistoryItem> response = api.loyaltyAirportVisitsGet(userId, panLastFourDigits, preferredLanguage, transactionDateFrom, transactionDateTo);
        assertEquals(response, list);
    }
    
    @SuppressWarnings("rawtypes")
    @Test(expected = ApiException.class)
    public void loyaltyAirportVisitsGetTest_Exception() throws ApiException {
        String userId = null;
        String panLastFourDigits = "1234";
        String preferredLanguage = "en-US";
        String transactionDateFrom = null;
        String transactionDateTo = null;
        LoungeHistoryItem loungeHistory = new LoungeHistoryItem();
        loungeHistory.setCity("St.Louis");
        List<LoungeHistoryItem> list = new ArrayList<>();
        list.add(loungeHistory);
        ApiResponse resp = new ApiResponse(200, null, list);
        when(apiClientMock.execute(any(Call.class), any(Type.class))).thenReturn(resp);
        api.loyaltyAirportVisitsGet(userId, panLastFourDigits, preferredLanguage, transactionDateFrom, transactionDateTo);
    }
    
}
