/*
 * Loyalty Airport Experience API
 * The Loyalty Airport Lounge APIs offers cardholders, via their issuers, the ability to  access the Mastercard Airport Lounge service through this digital channel.  Cardholders can search for airport lounges, get airport lounge details,  access airport lounges via their personalized Digital Membership Card,  and access their lounge history. These APIs can be used to build a rich,  interactive airport experience within the issuer's existing mobile application.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: project-ole@mastercard.flowdock.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mastercard.developer.loyalty_airport_client.api;

import com.mastercard.developer.loyalty_airport_client.ApiException;
import com.mastercard.developer.loyalty_airport_client.model.BundleUser;
import com.mastercard.developer.loyalty_airport_client.model.BundleUserPatch;
import com.mastercard.developer.loyalty_airport_client.model.BundleUserResponse;
import com.mastercard.developer.loyalty_airport_client.model.Errors;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BundleProfileApi
 */
@Ignore
public class BundleProfileApiTest {

    private final BundleProfileApi api = new BundleProfileApi();

    
    /**
     * Create Profile
     *
     * Create Profile user and associated product service(s) consents and card account(s)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUserTest() throws ApiException {
        BundleUser bundleUser = null;
        BundleUserResponse response = api.createUser(bundleUser);

        // TODO: test validations
    }
    
    /**
     * Partially Update Profile
     *
     * Partial updates of Profile user and associated product service(s) consents and card account(s)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchUserTest() throws ApiException {
        String userId = null;
        BundleUserPatch bundleUserPatch = null;
        BundleUserResponse response = api.patchUser(userId, bundleUserPatch);

        // TODO: test validations
    }
    
    /**
     * Find Consent by Id and product
     *
     * Returns a Consent on the basis of provided id, product as path params (https://tools.ietf.org/html/draft-ietf-scim-api-19#section-3.4.2.1)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readConsentTest() throws ApiException {
        String userId = null;
        String product = null;
        BundleUserResponse response = api.readConsent(userId, product);

        // TODO: test validations
    }
    
    /**
     * Find User by Id
     *
     * Returns a Users on the basis of provided id as path param (https://tools.ietf.org/html/draft-ietf-scim-api-19#section-3.4.2.1)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readUserTest() throws ApiException {
        String userId = null;
        BundleUserResponse response = api.readUser(userId);

        // TODO: test validations
    }
    
}
