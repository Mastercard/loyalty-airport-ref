/*
 *  Copyright (c) 2019 Mastercard
 
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
 
    http://www.apache.org/licenses/LICENSE-2.0
 
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

 * 
 * Loyalty Airport Experience API
 * The Loyalty Airport Lounge APIs offers cardholders, via their issuers, the ability to  access the Mastercard Airport Lounge service through this digital channel.  Cardholders can search for airport lounges, get airport lounge details,  access airport lounges via their personalized Digital Membership Card,  and access their lounge history. These APIs can be used to build a rich,  interactive airport experience within the issuer's existing mobile application.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: loyalty-benefits-support@mastercard.flowdock.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



package com.mastercard.developer.loyalty_airport_client.api;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.reflect.TypeToken;
import com.mastercard.developer.loyalty_airport_client.ApiCallback;
import com.mastercard.developer.loyalty_airport_client.ApiClient;
import com.mastercard.developer.loyalty_airport_client.ApiException;
import com.mastercard.developer.loyalty_airport_client.ApiResponse;
import com.mastercard.developer.loyalty_airport_client.Configuration;
import com.mastercard.developer.loyalty_airport_client.Pair;
import com.mastercard.developer.loyalty_airport_client.ProgressRequestBody;
import com.mastercard.developer.loyalty_airport_client.ProgressResponseBody;
import com.mastercard.developer.loyalty_airport_client.model.LoungeAirport;
import com.mastercard.developer.loyalty_airport_client.model.LoungeDMC;
import com.mastercard.developer.loyalty_airport_client.model.LoungeDetail;
import com.mastercard.developer.loyalty_airport_client.model.LoungeEntitlement;
import com.mastercard.developer.loyalty_airport_client.model.LoungeHistoryItem;

public class AirportApi {
    private ApiClient apiClient;
    
    private static String RESOURCE_URL_PREFIX = "/loyalty/airport/reference";

    public AirportApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AirportApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for loyaltyAirportDigitalMembershipCardsGet
     * @param userId Opaque identifier for the consumer. This is the same userId used while enrolling for airport via Bundle Profile API. (required)
     * @param panLastFourDigits Last four digits of user&#39;s registered 16 digit credit card number (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call loyaltyAirportDigitalMembershipCardsGetCall(String userId, String panLastFourDigits, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = RESOURCE_URL_PREFIX+"/digital-membership-cards";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("user_id", userId));
        }

        if (panLastFourDigits != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("pan_last_four_digits", panLastFourDigits));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call loyaltyAirportDigitalMembershipCardsGetValidateBeforeCall(String userId, String panLastFourDigits, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling loyaltyAirportDigitalMembershipCardsGet(Async)");
        }
        
        // verify the required parameter 'panLastFourDigits' is set
        if (panLastFourDigits == null) {
            throw new ApiException("Missing the required parameter 'panLastFourDigits' when calling loyaltyAirportDigitalMembershipCardsGet(Async)");
        }
        

        com.squareup.okhttp.Call call = loyaltyAirportDigitalMembershipCardsGetCall(userId, panLastFourDigits, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get airport lounge digital membership card
     * 
     * @param userId Opaque identifier for the consumer. This is the same userId used while enrolling for airport via Bundle Profile API. (required)
     * @param panLastFourDigits Last four digits of user&#39;s registered 16 digit credit card number (required)
     * @return LoungeDMC
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoungeDMC loyaltyAirportDigitalMembershipCardsGet(String userId, String panLastFourDigits) throws ApiException {
        ApiResponse<LoungeDMC> resp = loyaltyAirportDigitalMembershipCardsGetWithHttpInfo(userId, panLastFourDigits);
        return resp.getData();
    }

    /**
     * Get airport lounge digital membership card
     * 
     * @param userId Opaque identifier for the consumer. This is the same userId used while enrolling for airport via Bundle Profile API. (required)
     * @param panLastFourDigits Last four digits of user&#39;s registered 16 digit credit card number (required)
     * @return ApiResponse&lt;LoungeDMC&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoungeDMC> loyaltyAirportDigitalMembershipCardsGetWithHttpInfo(String userId, String panLastFourDigits) throws ApiException {
        com.squareup.okhttp.Call call = loyaltyAirportDigitalMembershipCardsGetValidateBeforeCall(userId, panLastFourDigits, null, null);
        Type localVarReturnType = new TypeToken<LoungeDMC>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get airport lounge digital membership card (asynchronously)
     * 
     * @param userId Opaque identifier for the consumer. This is the same userId used while enrolling for airport via Bundle Profile API. (required)
     * @param panLastFourDigits Last four digits of user&#39;s registered 16 digit credit card number (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call loyaltyAirportDigitalMembershipCardsGetAsync(String userId, String panLastFourDigits, final ApiCallback<LoungeDMC> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = loyaltyAirportDigitalMembershipCardsGetValidateBeforeCall(userId, panLastFourDigits, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LoungeDMC>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for loyaltyAirportEntitlementsGet
     * @param userId Opaque identifier for the consumer. This is the same userId used while enrolling for airport via Bundle Profile API. (required)
     * @param panLastFourDigits Last four digits of user&#39;s registered 16 digit credit card number (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call loyaltyAirportEntitlementsGetCall(String userId, String panLastFourDigits, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = RESOURCE_URL_PREFIX+"/entitlements";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("user_id", userId));
        }

        if (panLastFourDigits != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("pan_last_four_digits", panLastFourDigits));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call loyaltyAirportEntitlementsGetValidateBeforeCall(String userId, String panLastFourDigits, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling loyaltyAirportEntitlementsGet(Async)");
        }
        
        // verify the required parameter 'panLastFourDigits' is set
        if (panLastFourDigits == null) {
            throw new ApiException("Missing the required parameter 'panLastFourDigits' when calling loyaltyAirportEntitlementsGet(Async)");
        }
        

        com.squareup.okhttp.Call call = loyaltyAirportEntitlementsGetCall(userId, panLastFourDigits, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get information about future personal and guest entitlements
     * 
     * @param userId Opaque identifier for the consumer. This is the same userId used while enrolling for airport via Bundle Profile API. (required)
     * @param panLastFourDigits Last four digits of user&#39;s registered 16 digit credit card number (required)
     * @return List&lt;LoungeEntitlement&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<LoungeEntitlement> loyaltyAirportEntitlementsGet(String userId, String panLastFourDigits) throws ApiException {
        ApiResponse<List<LoungeEntitlement>> resp = loyaltyAirportEntitlementsGetWithHttpInfo(userId, panLastFourDigits);
        return resp.getData();
    }

    /**
     * Get information about future personal and guest entitlements
     * 
     * @param userId Opaque identifier for the consumer. This is the same userId used while enrolling for airport via Bundle Profile API. (required)
     * @param panLastFourDigits Last four digits of user&#39;s registered 16 digit credit card number (required)
     * @return ApiResponse&lt;List&lt;LoungeEntitlement&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<LoungeEntitlement>> loyaltyAirportEntitlementsGetWithHttpInfo(String userId, String panLastFourDigits) throws ApiException {
        com.squareup.okhttp.Call call = loyaltyAirportEntitlementsGetValidateBeforeCall(userId, panLastFourDigits, null, null);
        Type localVarReturnType = new TypeToken<List<LoungeEntitlement>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get information about future personal and guest entitlements (asynchronously)
     * 
     * @param userId Opaque identifier for the consumer. This is the same userId used while enrolling for airport via Bundle Profile API. (required)
     * @param panLastFourDigits Last four digits of user&#39;s registered 16 digit credit card number (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call loyaltyAirportEntitlementsGetAsync(String userId, String panLastFourDigits, final ApiCallback<List<LoungeEntitlement>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = loyaltyAirportEntitlementsGetValidateBeforeCall(userId, panLastFourDigits, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<LoungeEntitlement>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for loyaltyAirportLoungesGet
     * @param userId Opaque identifier for the consumer. This is the same userId used while enrolling for airport via Bundle Profile API. (required)
     * @param panLastFourDigits Last four digits of user&#39;s registered 16 digit credit card number (required)
     * @param searchText Free search text. Can be country name, country code, city name, airport name, airport code, or MCAE lounge code. Min Length: 3 (required)
     * @param preferredLanguage User&#39;s preferred language in localized ISO 639-1 format such as pt-BR (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call loyaltyAirportLoungesGetCall(String userId, String panLastFourDigits, String searchText, String preferredLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = RESOURCE_URL_PREFIX+"/lounges";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("user_id", userId));
        }

        if (panLastFourDigits != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("pan_last_four_digits", panLastFourDigits));
        }

        if (searchText != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("search_text", searchText));
        }

        if (preferredLanguage != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("preferred_language", preferredLanguage));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call loyaltyAirportLoungesGetValidateBeforeCall(String userId, String panLastFourDigits, String searchText, String preferredLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling loyaltyAirportLoungesGet(Async)");
        }
        
        // verify the required parameter 'panLastFourDigits' is set
        if (panLastFourDigits == null) {
            throw new ApiException("Missing the required parameter 'panLastFourDigits' when calling loyaltyAirportLoungesGet(Async)");
        }
        
        // verify the required parameter 'searchText' is set
        if (searchText == null) {
            throw new ApiException("Missing the required parameter 'searchText' when calling loyaltyAirportLoungesGet(Async)");
        }
        
        // verify the required parameter 'preferredLanguage' is set
        if (preferredLanguage == null) {
            throw new ApiException("Missing the required parameter 'preferredLanguage' when calling loyaltyAirportLoungesGet(Async)");
        }
        

        com.squareup.okhttp.Call call = loyaltyAirportLoungesGetCall(userId, panLastFourDigits, searchText, preferredLanguage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Find airport lounges
     * 
     * @param userId Opaque identifier for the consumer. This is the same userId used while enrolling for airport via Bundle Profile API. (required)
     * @param panLastFourDigits Last four digits of user&#39;s registered 16 digit credit card number (required)
     * @param searchText Free search text. Can be country name, country code, city name, airport name, airport code, or MCAE lounge code. Min Length: 3 (required)
     * @param preferredLanguage User&#39;s preferred language in localized ISO 639-1 format such as pt-BR (required)
     * @return List&lt;LoungeAirport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<LoungeAirport> loyaltyAirportLoungesGet(String userId, String panLastFourDigits, String searchText, String preferredLanguage) throws ApiException {
        ApiResponse<List<LoungeAirport>> resp = loyaltyAirportLoungesGetWithHttpInfo(userId, panLastFourDigits, searchText, preferredLanguage);
        return resp.getData();
    }

    /**
     * Find airport lounges
     * 
     * @param userId Opaque identifier for the consumer. This is the same userId used while enrolling for airport via Bundle Profile API. (required)
     * @param panLastFourDigits Last four digits of user&#39;s registered 16 digit credit card number (required)
     * @param searchText Free search text. Can be country name, country code, city name, airport name, airport code, or MCAE lounge code. Min Length: 3 (required)
     * @param preferredLanguage User&#39;s preferred language in localized ISO 639-1 format such as pt-BR (required)
     * @return ApiResponse&lt;List&lt;LoungeAirport&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<LoungeAirport>> loyaltyAirportLoungesGetWithHttpInfo(String userId, String panLastFourDigits, String searchText, String preferredLanguage) throws ApiException {
        com.squareup.okhttp.Call call = loyaltyAirportLoungesGetValidateBeforeCall(userId, panLastFourDigits, searchText, preferredLanguage, null, null);
        Type localVarReturnType = new TypeToken<List<LoungeAirport>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Find airport lounges (asynchronously)
     * 
     * @param userId Opaque identifier for the consumer. This is the same userId used while enrolling for airport via Bundle Profile API. (required)
     * @param panLastFourDigits Last four digits of user&#39;s registered 16 digit credit card number (required)
     * @param searchText Free search text. Can be country name, country code, city name, airport name, airport code, or MCAE lounge code. Min Length: 3 (required)
     * @param preferredLanguage User&#39;s preferred language in localized ISO 639-1 format such as pt-BR (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call loyaltyAirportLoungesGetAsync(String userId, String panLastFourDigits, String searchText, String preferredLanguage, final ApiCallback<List<LoungeAirport>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = loyaltyAirportLoungesGetValidateBeforeCall(userId, panLastFourDigits, searchText, preferredLanguage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<LoungeAirport>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for loyaltyAirportLoungesLoungeCodeGet
     * @param loungeCode A unique ID that corresponds to a lounge and can be retrived from lounges search response (required)
     * @param userId Opaque identifier for the consumer. This is the same userId used while enrolling for airport via Bundle Profile API. (required)
     * @param panLastFourDigits Last four digits of user&#39;s registered 16 digit credit card number (required)
     * @param preferredLanguage User&#39;s preferred language in localized ISO 639-1 format such as pt-BR (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call loyaltyAirportLoungesLoungeCodeGetCall(String loungeCode, String userId, String panLastFourDigits, String preferredLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = RESOURCE_URL_PREFIX+"/lounges/{lounge_code}"
            .replaceAll("\\{" + "lounge_code" + "\\}", apiClient.escapeString(loungeCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("user_id", userId));
        }

        if (panLastFourDigits != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("pan_last_four_digits", panLastFourDigits));
        }

        if (preferredLanguage != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("preferred_language", preferredLanguage));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call loyaltyAirportLoungesLoungeCodeGetValidateBeforeCall(String loungeCode, String userId, String panLastFourDigits, String preferredLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'loungeCode' is set
        if (loungeCode == null) {
            throw new ApiException("Missing the required parameter 'loungeCode' when calling loyaltyAirportLoungesLoungeCodeGet(Async)");
        }
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling loyaltyAirportLoungesLoungeCodeGet(Async)");
        }
        
        // verify the required parameter 'panLastFourDigits' is set
        if (panLastFourDigits == null) {
            throw new ApiException("Missing the required parameter 'panLastFourDigits' when calling loyaltyAirportLoungesLoungeCodeGet(Async)");
        }
        
        // verify the required parameter 'preferredLanguage' is set
        if (preferredLanguage == null) {
            throw new ApiException("Missing the required parameter 'preferredLanguage' when calling loyaltyAirportLoungesLoungeCodeGet(Async)");
        }
        

        com.squareup.okhttp.Call call = loyaltyAirportLoungesLoungeCodeGetCall(loungeCode, userId, panLastFourDigits, preferredLanguage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get airport lounge details
     * 
     * @param loungeCode A unique ID that corresponds to a lounge and can be retrived from lounges search response (required)
     * @param userId Opaque identifier for the consumer. This is the same userId used while enrolling for airport via Bundle Profile API. (required)
     * @param panLastFourDigits Last four digits of user&#39;s registered 16 digit credit card number (required)
     * @param preferredLanguage User&#39;s preferred language in localized ISO 639-1 format such as pt-BR (required)
     * @return LoungeDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoungeDetail loyaltyAirportLoungesLoungeCodeGet(String loungeCode, String userId, String panLastFourDigits, String preferredLanguage) throws ApiException {
        ApiResponse<LoungeDetail> resp = loyaltyAirportLoungesLoungeCodeGetWithHttpInfo(loungeCode, userId, panLastFourDigits, preferredLanguage);
        return resp.getData();
    }

    /**
     * Get airport lounge details
     * 
     * @param loungeCode A unique ID that corresponds to a lounge and can be retrived from lounges search response (required)
     * @param userId Opaque identifier for the consumer. This is the same userId used while enrolling for airport via Bundle Profile API. (required)
     * @param panLastFourDigits Last four digits of user&#39;s registered 16 digit credit card number (required)
     * @param preferredLanguage User&#39;s preferred language in localized ISO 639-1 format such as pt-BR (required)
     * @return ApiResponse&lt;LoungeDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoungeDetail> loyaltyAirportLoungesLoungeCodeGetWithHttpInfo(String loungeCode, String userId, String panLastFourDigits, String preferredLanguage) throws ApiException {
        com.squareup.okhttp.Call call = loyaltyAirportLoungesLoungeCodeGetValidateBeforeCall(loungeCode, userId, panLastFourDigits, preferredLanguage, null, null);
        Type localVarReturnType = new TypeToken<LoungeDetail>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get airport lounge details (asynchronously)
     * 
     * @param loungeCode A unique ID that corresponds to a lounge and can be retrived from lounges search response (required)
     * @param userId Opaque identifier for the consumer. This is the same userId used while enrolling for airport via Bundle Profile API. (required)
     * @param panLastFourDigits Last four digits of user&#39;s registered 16 digit credit card number (required)
     * @param preferredLanguage User&#39;s preferred language in localized ISO 639-1 format such as pt-BR (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call loyaltyAirportLoungesLoungeCodeGetAsync(String loungeCode, String userId, String panLastFourDigits, String preferredLanguage, final ApiCallback<LoungeDetail> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = loyaltyAirportLoungesLoungeCodeGetValidateBeforeCall(loungeCode, userId, panLastFourDigits, preferredLanguage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LoungeDetail>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for loyaltyAirportVisitsGet
     * @param userId Opaque identifier for the consumer. This is the same userId used while enrolling for airport via Bundle Profile API. (required)
     * @param panLastFourDigits Last four digits of user&#39;s registered 16 digit credit card number (required)
     * @param preferredLanguage User&#39;s preferred language in localized ISO 639-1 format such as pt-BR (required)
     * @param transactionDateFrom visits can be filtered starting from this specified date (optional)
     * @param transactionDateTo visits can be filtered upto this specified date (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call loyaltyAirportVisitsGetCall(String userId, String panLastFourDigits, String preferredLanguage, String transactionDateFrom, String transactionDateTo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = RESOURCE_URL_PREFIX+"/visits";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("user_id", userId));
        }

        if (panLastFourDigits != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("pan_last_four_digits", panLastFourDigits));
        }

        if (preferredLanguage != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("preferred_language", preferredLanguage));
        }

        if (transactionDateFrom != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("transaction_date_from", transactionDateFrom));
        }

        if (transactionDateTo != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("transaction_date_to", transactionDateTo));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call loyaltyAirportVisitsGetValidateBeforeCall(String userId, String panLastFourDigits, String preferredLanguage, String transactionDateFrom, String transactionDateTo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling loyaltyAirportVisitsGet(Async)");
        }
        
        // verify the required parameter 'panLastFourDigits' is set
        if (panLastFourDigits == null) {
            throw new ApiException("Missing the required parameter 'panLastFourDigits' when calling loyaltyAirportVisitsGet(Async)");
        }
        
        // verify the required parameter 'preferredLanguage' is set
        if (preferredLanguage == null) {
            throw new ApiException("Missing the required parameter 'preferredLanguage' when calling loyaltyAirportVisitsGet(Async)");
        }
        

        com.squareup.okhttp.Call call = loyaltyAirportVisitsGetCall(userId, panLastFourDigits, preferredLanguage, transactionDateFrom, transactionDateTo, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get airport lounge access history
     * 
     * @param userId Opaque identifier for the consumer. This is the same userId used while enrolling for airport via Bundle Profile API. (required)
     * @param panLastFourDigits Last four digits of user&#39;s registered 16 digit credit card number (required)
     * @param preferredLanguage User&#39;s preferred language in localized ISO 639-1 format such as pt-BR (required)
     * @param transactionDateFrom visits can be filtered starting from this specified date (optional)
     * @param transactionDateTo visits can be filtered upto this specified date (optional)
     * @return List&lt;LoungeHistoryItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<LoungeHistoryItem> loyaltyAirportVisitsGet(String userId, String panLastFourDigits, String preferredLanguage, String transactionDateFrom, String transactionDateTo) throws ApiException {
        ApiResponse<List<LoungeHistoryItem>> resp = loyaltyAirportVisitsGetWithHttpInfo(userId, panLastFourDigits, preferredLanguage, transactionDateFrom, transactionDateTo);
        return resp.getData();
    }

    /**
     * Get airport lounge access history
     * 
     * @param userId Opaque identifier for the consumer. This is the same userId used while enrolling for airport via Bundle Profile API. (required)
     * @param panLastFourDigits Last four digits of user&#39;s registered 16 digit credit card number (required)
     * @param preferredLanguage User&#39;s preferred language in localized ISO 639-1 format such as pt-BR (required)
     * @param transactionDateFrom visits can be filtered starting from this specified date (optional)
     * @param transactionDateTo visits can be filtered upto this specified date (optional)
     * @return ApiResponse&lt;List&lt;LoungeHistoryItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<LoungeHistoryItem>> loyaltyAirportVisitsGetWithHttpInfo(String userId, String panLastFourDigits, String preferredLanguage, String transactionDateFrom, String transactionDateTo) throws ApiException {
        com.squareup.okhttp.Call call = loyaltyAirportVisitsGetValidateBeforeCall(userId, panLastFourDigits, preferredLanguage, transactionDateFrom, transactionDateTo, null, null);
        Type localVarReturnType = new TypeToken<List<LoungeHistoryItem>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get airport lounge access history (asynchronously)
     * 
     * @param userId Opaque identifier for the consumer. This is the same userId used while enrolling for airport via Bundle Profile API. (required)
     * @param panLastFourDigits Last four digits of user&#39;s registered 16 digit credit card number (required)
     * @param preferredLanguage User&#39;s preferred language in localized ISO 639-1 format such as pt-BR (required)
     * @param transactionDateFrom visits can be filtered starting from this specified date (optional)
     * @param transactionDateTo visits can be filtered upto this specified date (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call loyaltyAirportVisitsGetAsync(String userId, String panLastFourDigits, String preferredLanguage, String transactionDateFrom, String transactionDateTo, final ApiCallback<List<LoungeHistoryItem>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = loyaltyAirportVisitsGetValidateBeforeCall(userId, panLastFourDigits, preferredLanguage, transactionDateFrom, transactionDateTo, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<LoungeHistoryItem>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
